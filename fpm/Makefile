package_name = jsoncdc
package_description = JSONCDC provides change data capture for Postgres, translating the Postgres write ahead log to JSON
package_version = 0.1.0
deb_version = 1
upstream_url = https://github.com/instructure/jsoncdc
package_vendor = Instructure
ubuntu_releases = xenial bionic cosmic
dependencies = libc6 libgcc1
target_list = jsoncdc

TEMPDIR := $(shell mktemp -d)
GIT_TAG = v0.1.0

buildjson:
	git clone https://github.com/instructure/jsoncdc.git $(TEMPDIR)
	cd $(TEMPDIR) && git checkout tags/$(GIT_TAG)
	cd $(TEMPDIR) && make

jsoncdc: buildjson
	mkdir -p src/usr/share/postgresql/9.5/extension/
	mkdir -p src/usr/lib/postgresql/9.5/lib
	cp $(TEMPDIR)/jsoncdc.so src/usr/lib/postgresql/9.5/lib/
	cp $(TEMPDIR)/sql/*.sql src/usr/share/postgresql/9.5/extension/
	cp $(TEMPDIR)/jsoncdc.control src//usr/share/postgresql/9.5/extension/

# ====================================================================
# Autogenerated pls2not touch
# ====================================================================
deb_file = $(package_name)-$(package_version)-$(deb_version).deb
systemd_deb_file = $(package_name)-systemd-$(package_version)-$(deb_version).deb

# set some defaults
ifeq ($(package_arch),)
	package_arch = amd64
endif

ifeq ($(package_maintainer),)
	package_maintainer = ops-frd@instructure.com
endif

ifeq ($(package_vendor),)
	package_vendor = $(package_maintainer)
endif

ifeq ($(upstream_url),)
	upstream_url = file:///dev/null
endif

ifeq ($(ubuntu_releases),)
	ubuntu_releases = trusty
endif

ifeq ($(custom_repository),)
	custom_repository = ""
endif

# look for special files
default_file = $(shell find . -maxdepth 1 -name $(package_name).default)
upstart_file = $(shell find . -maxdepth 1 -name $(package_name).upstart)
systemd_file = $(shell find . -maxdepth 1 -name $(package_name).service)
before_install_script = $(shell find . -maxdepth 1 -name before-install.sh)
after_install_script = $(shell find . -maxdepth 1 -name after-install.sh)
before_remove_script = $(shell find . -maxdepth 1 -name before-remove.sh)
after_remove_script = $(shell find . -maxdepth 1 -name after-remove.sh)
before_upgrade_script = $(shell find . -maxdepth 1 -name before-upgrade.sh)
after_upgrade_script = $(shell find . -maxdepth 1 -name after-upgrade.sh)

ifneq (,$(and $(findstring xenial,$(ubuntu_releases)),$(systemd_file)))
	create_systemd_deb = yes
endif

ifeq (,$(systemd_file))
	create_deb = yes
endif

ifneq (,$(filter-out xenial,$(ubuntu_releases)))
	create_deb = yes
endif

# generate list of debs to create
deb_list =
ifeq ($(create_deb),yes)
	deb_list += $(deb_file)
endif

ifeq ($(create_systemd_deb),yes)
	deb_list += $(systemd_deb_file)
endif

# default args
fpm_args = -t deb -s dir \
	-a "$(package_arch)" \
	-m "$(package_maintainer)" \
	--vendor "$(package_vendor)" \
	--url "$(upstream_url)" \
	--description "$(package_description)" \
	-n $(package_name) \
	-v $(package_version)-$(deb_version) \
	-C src

extra_fpm_args = -p $(deb_file)
systemd_extra_fpm_args = -p $(systemd_deb_file)

other_targets =
systemd_other_targets =
upstart_other_targets =
ifneq ($(default_file),)
	extra_fpm_args += --deb-default $(default_file)
	upstart_other_targets += $(default_file)
endif
ifneq ($(upstart_file),)
	extra_fpm_args += --deb-upstart $(upstart_file)
	upstart_other_targets += $(upstart_file)
endif
ifneq ($(systemd_file),)
	systemd_extra_fpm_args += --deb-systemd $(systemd_file)
	systemd_other_targets += $(systemd_file)
endif
ifneq ($(before_install_script),)
	fpm_args += --before-install $(before_install_script)
	other_targets += $(before_install_script)
endif
ifneq ($(after_install_script),)
	fpm_args += --after-install $(after_install_script)
	other_targets += $(after_install_script)
endif
ifneq ($(before_remove_script),)
	fpm_args += --before-remove $(before_remove_script)
	other_targets += $(before_remove_script)
endif
ifneq ($(after_remove_script),)
	fpm_args += --after-remove $(after_remove_script)
	other_targets += $(after_remove_script)
endif
ifneq ($(before_upgrade_script),)
	fpm_args += --before-upgrade $(before_upgrade_script)
	other_targets += $(before_upgrade_script)
endif
ifneq ($(after_upgrade_script),)
	fpm_args += --after-upgrade $(after_upgrade_script)
	other_targets += $(after_upgrade_script)
endif

# set `dependencies` to a list of other packages that this package requires
$(foreach dep,$(dependencies),$(eval fpm_args += --depends $(dep)))

default: prereq $(deb_list)

$(deb_file): $(target_list) $(other_targets) $(upstart_other_targets)
	rm -f $@
	fpm $(fpm_args) $(extra_fpm_args) .

$(systemd_deb_file): $(target_list) $(other_targets) $(systemd_other_targets)
	rm -f $@
	fpm $(fpm_args) $(systemd_extra_fpm_args) .

custom_clean:

clean: custom_clean
	rm -rf working
	rm -rf src
	rm -f *.deb

prereq:
	@which fpm &>/dev/null || \
		{ echo "ERROR: fpm is not installed"; echo; echo "Run 'gem install fpm' to install fpm"; echo; exit 1; }
	@test -n "`tar --version 2>&1 |grep GNU`" || which gtar &>/dev/null || \
		{ echo "ERROR: gnu tar was expected but not found"; \
		[ `uname -s` = Darwin ] && { echo; echo "Run 'brew install gnu-tar' to install gnu tar'"; }; \
		echo; exit 1; }

deploy: default

.PHONY: clean custom_clean prereq golang-dep default deploy
